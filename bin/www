#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tcn-radar:server');
var http = require('http');
var mqtt = require("mqtt");
var webSocket = require("../utility/websockets")
var db = require("../database/db");
var linesModel = require("../models/lines");
require('events').EventEmitter.defaultMaxListeners = 250;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Testing the MQTT service
const host = 'mqtt://127.0.0.1';
const options = {
    clientId: '',
    username: process.env.MQTT_USER,
    password: process.env.MQTT_PASS,
    clean: true
}
const client = mqtt.connect(host, options);
client.on('connect', () => {
    client.subscribe(
        [
            'afam6ts/tv', 'gereguGs/pv', 'odukpanits/tv', 
            'omotoso2ts/tv', 'riversIppPs/pr', 'sapelets/pv',
            'omotoso11ts/pv', 'omotoso12ts/pv', 'delta3gs/pv',
            'phmains/tv', 'lokojats/tv', 'azuraIppGs/tr',
            'ikotekpene/tv', 'gwagwaladats/tv', 'gereguGs/tv',
            'ekimts/tv', 'eketts/tv', 'alaojinippts/tv', 
            'riversIppPs/pv', 'afam6ts/tv', 'omokugs/pv', 'ihovborts/tv'
        ],
     (err) => {
        if(err) {
            console.log('this is the error', err);
        }
    })
});
client.on('message', (topic, message) => {
  // if(topic === "omokugs/pv" ) {
  //   console.log(message.toString(), 'omoku topic')
  // }
  // broadcast the message to the client that are connected
  // Function to run when a client connects to the server whereever it is hosted
  // io.on('connection', (socket) => {
  //   // send the message to the client
  //   io.sockets.emit('message', { message: message.toString() });
  //   // socket.on('responderSignin', (data) => {
  //   //   socket.username = data.nameOfUnit;
      
  //   // });
  // });
  // console.log(topic, 'the topic')
  // line model data => date, hour, minute, seconds, kv, mw, mvar, amp, equipment_id, station, level, line_name, variant
  let data;
  // console.log([message.toString(), topic, 'the message'])
  // try block needed here.
  try {
      data = JSON.parse(message.toString());     
      const station = data.id;
      const time = data.t ? data.t : new Date().toLocaleTimeString("en-GB").split(' ')[0];
      const { lines, units } = data;
      var options = { year: 'numeric', month: '2-digit', day: '2-digit' };
      const date = new Date().toLocaleDateString("en-GB", options).split('/').reverse().join('-');
      const hour = time.split(':')[0];
      const minute = time.split(':')[1]
      const seconds = time.split(':')[2]
      const level = 330;
      const dateTemp = date.split('-');
      const epoch_time = new Date(Number(dateTemp[0]), Number(dateTemp[1]-1), Number(dateTemp[2]), Number(hour)+1, Number(minute), Number(seconds));
      // console.log(epoch_time.getTime(), epoch_time, 'the epoch')
      let kv, mw, mvar, amp, equipment_id, line_name, variant;
      // loop over the lines or units array
      const equip = lines ? lines : units ? units : undefined
      equip.forEach(line => {
          equipment_id = line.id;
          line_name = line.id;
          variant = line.td ? 'transmission' : line.gd ? 'generation' : undefined;
          if (variant === 'transmission') {
              kv = line.td.V ? line.td.V : 0.00;
              mw = line.td.mw ? line.td.mw : 0.00;
              amp = line.td.A ? line.td.A : 0.00;
              mvar = line.td.mvar ? line.td.mvar : 0.00;
          } else if (variant === 'generation') {
              kv = line.gd.V ? line.gd.V : 0.00;
              mw = line.gd.mw ? line.gd.mw : 0.00;
              amp = line.gd.A ? line.gd.A : 0.00;
              mvar = line.gd.mvar ? line.gd.mvar : 0.00;
          } else if (variant === undefined) {
              return;
          }
          db.query(linesModel.create, [date, hour, minute, seconds, kv, mw, mvar, amp, equipment_id, station, level, line_name, variant, epoch_time.getTime()])
              .then( response => {
                  // console.log(response.rows)
              })
              .catch(err => console.log(err))
      })   
  // client.end()
  } catch(err) {
      console.error(err)
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, "172.16.200.3");
server.on('error', onError);
server.on('listening', onListening);

// Instantiation of the websocket on the server
webSocket(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log(addr.port, 'the port', addr)
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
