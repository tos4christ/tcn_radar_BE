#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tcn-radar:server');
var http = require('http');
const fs = require('fs');
var https = require('https');
var mqtt = require("mqtt");
// var webSocket = require("../utility/websockets")
var db = require("../database/db");
var linesModel = require("../models/lines");
var weatherModel = require("../models/weather");
var frequencyModel = require("../models/frequency");
var { Server } = require("socket.io");
// var os = require('node:os');
// os.setPriority(process.pid, os.constants.priority.PRIORITY_HIGHEST);

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.station_holder = [];
/**
 * Create HTTPS server.
 */
const cert = fs.readFileSync('./ssl/tcnnas.org.crt');
const key = fs.readFileSync('./ssl/tcnnas.org.key');
const ca = fs.readFileSync('./ssl/tcnnas.org.ca-bundle');

const httpsOptions = {
  cert: cert,
  key: key,
  ca: ca
}

var server = https.createServer(httpsOptions, app);

// var server = http.createServer(app);

const io = new Server(server);
// io.on("connection", socket => {
//   console.log(socket.data, 'the socket data');
//   socket.on("connected", data => {
//     console.log(data, "the data from client");
//   })
// })

// Registering the MQTT service
const host_1 = 'mqtt://172.16.200.9';
const host_2 = 'mqtt://tcniot.org.ng';
const host_3 = 'mqtt://127.0.0.1';

const options = {
    clientId: '',
    username: process.env.MQTT_USER,
    password: process.env.MQTT_PASS,
    clean: true
}
const client_1 = mqtt.connect(host_1, options);
const client_2 = mqtt.connect(host_2, options);
const client_3 = mqtt.connect(host_3);

client_1.on('connect', () => {
  client_1.subscribe(
      [
           'gereguGs/pv', 'odukpanits/tv', 'omotoso2ts/tv',
          'omotoso11ts/pv', 'omotoso12ts/pv',
           'lokojats/tv',
          'ikotekpene/tv', 'gwagwaladats/tv', 'gereguGs/tv',
          'ekimts/tv', 'eketts/tv', 'alaojinippts/tv', 
          'riversIppPs/pv', 'markudits/tv',
          'dadinkowags/tv', 'ugwuajits/tv',
          'gbaraints/pv', 'olorunsogo1ts/pv', 'parasenergyPs/pv',
           'olorunsogo2ts/tv','omotoshoGas/pv',
      ],
   (err) => {
      if(err) {
          console.log('this is the error', err);
      }
  })
}); 
client_2.on('connect', () => {
  client_2.subscribe(
    [
      'asabats/tv', 'delta4gs/tv', 'OkpaiippGs/tv', 'jebbaTs/tv',
       'kainjits/tv', 'egbings/pv', 'riversIppPs/pr', 'afam4gs/pv',
       'shirorogs/pv', 'afam6ts/tv', 'delta2gs/pv', 'delta3gs/pv',
       'omokugs/pv', 'phmains/tv', 'sapelets/pv', 'ihovborts/tv',
       'omotoso2ts/tv', 'omotoso11ts/pv', 'omotoso12ts/pv',
       'olorunsogo1ts/pv', 'olorunsogo2ts/tv', 'omotoshoGas/pv',
        'odukpanits/pv', 'transamadi/tv', 'afam5gs/pv', 
        'dadinkowags/tv', 'gbaraints/pv', 'zungeru/tv',
        'zungeru/status'
    ],
    err => err ? console.log('this is the error', err) : null
  )
});
client_3.on('connect', () => {
  client_3.subscribe(
    [ 'frequency' ],
    err => err ? console.log('this is the error', err) : null
  )
});

client_1.on('message', (topic, message) => {
  // if ([ 'ekimts/tv', 'eketts/tv', 'riversIppPs/pv', 'dadinkowags/tv'].includes(topic)) {
  //   console.log(message.toString(), 'client 1')
  // } 
  // broadcast the message to the client that are connected
  // Function to run when a client connects to the server whereever it is hosted
   
   io.sockets.emit('client_message_111', { message: message.toString() }); 
  
  // line model data => date, hour, minute, seconds, kv, mw, mvar, amp, equipment_id, station, level, line_name, variant
  let data;
  try {
      data = JSON.parse(message.toString());     
      const station = data.id;
      const time = data.t ? data.t : new Date().toLocaleTimeString("en-GB").split(' ')[0];
      const { lines, units } = data;
      var options = { year: 'numeric', month: '2-digit', day: '2-digit' };
      const date = new Date().toLocaleDateString("en-GB", options).split('/').reverse().join('-');
      const hour = time.split(':')[0];
      const minute = time.split(':')[1]
      const seconds = time.split(':')[2]
      const level = 330;
      const dateTemp = date.split('-');
      const epoch_time = new Date(Number(dateTemp[0]), Number(dateTemp[1]-1), Number(dateTemp[2]), Number(hour)+1, Number(minute), Number(seconds));
      // console.log(epoch_time.getTime(), epoch_time, 'the epoch')
      let kv, mw, mvar, amp, equipment_id, line_name, variant;
      // loop over the lines or units array
      const equip = lines ? lines : units ? units : undefined
      equip.forEach(line => {
          equipment_id = line.id;
          line_name = line.id;
          variant = line.td ? 'transmission' : line.gd ? 'generation' : undefined;
          if (variant === 'transmission') {
                // kv = line.td.V ? line.td.V : 0.00;
                // mw = line.td.mw ? line.td.mw : 0.00;
                // amp = line.td.A ? line.td.A : 0.00;
                // mvar = line.td.mvar ? line.td.mvar : 0.00;
              if (station === 'olorunsogoPhase1Gs' && line_name === 'r1w') {
                // console.log(line, 'this is the olorunsogo line')
                kv = line.td.V ? line.td.V : 0.00;
                // uncomment this later when the CT ratio has been corrected
                // mw = line.td.mw ? line.td.mw : 0.00;
                // comment this out when the CT ratio has been corrected
                mw = line.td.mw ? Number(line.td.mw * 1.62344817).toFixed(2) : 0.00;
                amp = line.td.A ? line.td.A : 0.00;
                mvar = line.td.mvar ? line.td.mvar : 0.00;
              } else {
                kv = line.td.V ? line.td.V : 0.00;
                mw = line.td.mw ? line.td.mw : 0.00;
                amp = line.td.A ? line.td.A : 0.00;
                mvar = line.td.mvar ? line.td.mvar : 0.00;
              }              
          } else if (variant === 'generation') {
              kv = line.gd.V ? line.gd.V : 0.00;
              mw = line.gd.mw ? line.gd.mw : 0.00;
              amp = line.gd.A ? line.gd.A : 0.00;
              mvar = line.gd.mvar ? line.gd.mvar : 0.00;
          } else if (variant === undefined) {
              return;
          }
          db.query(linesModel.create, [date, hour, minute, seconds, kv, mw, mvar, amp, equipment_id, station, level, line_name, variant, epoch_time.getTime()])
              .then( response => {
                  // console.log('its okay 1')
              })
              .catch(err => console.log(err))
      })   
  // client.end()
  } catch(err) {
      console.error(err)
  }
});
client_2.on('message', (topic, message) => {
  if (['gbaraints/pv', 'zungeru/status', 'zungeru/tv', 'gbaraints/status'].includes(topic)) {
    console.log(message.toString(), 'client 2')
  }
  // broadcast the message to the client that are connected
  // Function to run when a client connects to the server whereever it is hosted
   
  io.sockets.emit('client_message_222', { message: message.toString() });
  
  // line model data => date, hour, minute, seconds, kv, mw, mvar, amp, equipment_id, station, level, line_name, variant
  let data;
  try {
      data = JSON.parse(message.toString());     
      const station = data.id;
      const time = data.t ? data.t : new Date().toLocaleTimeString("en-GB").split(' ')[0];
      const { lines, units } = data;
      var options = { year: 'numeric', month: '2-digit', day: '2-digit' };
      const date = new Date().toLocaleDateString("en-GB", options).split('/').reverse().join('-');
      const hour = time.split(':')[0];
      const minute = time.split(':')[1]
      const seconds = time.split(':')[2]
      const level = 330;
      const dateTemp = date.split('-');
      const epoch_time = new Date(Number(dateTemp[0]), Number(dateTemp[1]-1), Number(dateTemp[2]), Number(hour)+1, Number(minute), Number(seconds));
      // console.log(epoch_time.getTime(), epoch_time, 'the epoch')
      let kv, mw, mvar, amp, equipment_id, line_name, variant;
      // loop over the lines or units array
      const equip = lines ? lines : units ? units : undefined
      equip.forEach(line => {
          equipment_id = line.id;
          line_name = line.id;
          variant = line.td ? 'transmission' : line.gd ? 'generation' : undefined;
          if (variant === 'transmission') {
              kv = line.td.V ? line.td.V : 0.00;
              mw = line.td.mw ? line.td.mw : 0.00;
              amp = line.td.A ? line.td.A : 0.00;
              mvar = line.td.mvar ? line.td.mvar : 0.00;
          } else if (variant === 'generation') {
              kv = line.gd.V ? line.gd.V : 0.00;
              mw = line.gd.mw ? line.gd.mw : 0.00;
              amp = line.gd.A ? line.gd.A : 0.00;
              mvar = line.gd.mvar ? line.gd.mvar : 0.00;
          } else if (variant === undefined) {
              return;
          }
          db.query(linesModel.create, [date, hour, minute, seconds, kv, mw, mvar, amp, equipment_id, station, level, line_name, variant, epoch_time.getTime()])
              .then( response => {
                // console.log('its okay 2')
              })
              .catch(err => console.log(err))
      })   
  // client.end()
  } catch(err) {
      console.error(err)
  }
});
client_3.on('message', (topic, message) => {  
  let frequency;
  try {
      frequency = JSON.parse(message.toString());
      const time = new Date().toLocaleTimeString("en-GB").split(' ')[0];
      var options = { year: 'numeric', month: '2-digit', day: '2-digit' };
      const date = new Date().toLocaleDateString("en-GB", options).split('/').reverse().join('-');
      const hour = time.split(':')[0];
      const minute = time.split(':')[1];
      const seconds = time.split(':')[2];
      const dateTemp = date.split('-');
      const time_epoch = new Date(Number(dateTemp[0]), Number(dateTemp[1]-1), Number(dateTemp[2]), Number(hour)+1, Number(minute), Number(seconds));
            
      io.sockets.emit('frequency000', { message: frequency.toString() });
     
      db.query(frequencyModel.create, [date, time, time_epoch.getTime(), frequency])
        .then( response => {
          // console.log('its okay 2')
        })
        .catch(err => console.log(err))
    } catch (e) {
      console.error(e);
    }
});

// Get weather data and store it in the database
const timeout = 60000;
async function getWeather() {
  try {
    const response = await db.query(weatherModel.get_station_coords);
    // Separate for generation and transmission
    // Add the type to the station data before sending it to the frontend
    let stations_current_resolved_holder = [];
    let stations_3hourly_resolved_holder = [];
    let stations_daily_resolved_holder = [];
    let station_coords = response.rows;
    // let station_url_array = [];
    let station_current_url_array = [];
    let station_3hourly_url_array = [];
    let station_daily_url_array = [];
    // First get all the URLs you want to hit
    station_coords.map( station => {
      const { long, lat, name, type, id } = station;
      const daily_count = 16;
      // const onecall_url_3 = `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${long}&exclude=minutely,hourly&appid=${process.env.WEATHER_API}`;
      const onecall_current_url_2 = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${process.env.WEATHER_API}&units=metric`;
      const onecall_3hourly_url_2 = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${long}&appid=${process.env.WEATHER_API}&units=metric`;
      const onecall_daily_url_2 = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${long}&cnt=${daily_count}&appid=${process.env.WEATHER_API}&units=metric`;
      station_current_url_array.push({ onecall_current_url_2, id, name, type });
      station_3hourly_url_array.push({ onecall_3hourly_url_2, id, name, type });
      station_daily_url_array.push({ onecall_daily_url_2, id, name, type });
    });
    await Promise.all(station_current_url_array.map(async (station_url) => {
      const { onecall_current_url_2: onecall_current_url_2_1, name: name_1, type: type_1 } = station_url;
      const response_1 = await axios.get(onecall_current_url_2_1);
      const station_2 = {};
      station_2.name = name_1;
      station_2.type = type_1;
      station_2.current_weather_data = response_1.data;
      stations_current_resolved_holder.push(station_2);
      const { coord, weather, main, wind, dt, clouds, rain } = response_1.data;
      const { lon, lat: lat_1 } = coord;
      const { id: id_1, main: main_weather, description, icon } = weather[0];
      const { speed, deg, gust } = wind;
      const { temp, feels_like, pressure, humidity } = main;
      const { "1h": rain_volume_1h, "3h" : rain_volume_3h} = rain ? rain : { "1h" : null, "3h" : null};
      const {all: cloudiness} = clouds ? clouds : { all : null};
      var options = { year: 'numeric', month: '2-digit', day: '2-digit' };
      const date = new Date().toLocaleDateString("en-GB", options).split('/').reverse().join('-');
      // Save data into the database 
      db.query(weatherModel.create, [
        date, dt, name_1, lon, lat_1, main_weather, id_1, description, 
        icon, temp, feels_like, pressure, humidity, speed, deg, gust ? gust : 0,
        rain_volume_1h, rain_volume_3h, cloudiness
      ])
        .then(response_2 => {
        })
        .catch(e => console.error(e));
    }));

    // Use the  hourly and daily forecast for requests only

    // await Promise.all(station_3hourly_url_array.map(async (station_url_3) => {
    //   const { onecall_3hourly_url_2: onecall_3hourly_url_2_1, name: name_2, type: type_2 } = station_url_3;
    //   const response_3 = await axios.get(onecall_3hourly_url_2_1);
    //   const station_3 = {};
    //   station_3.name = name_2;
    //   station_3.type = type_2;
    //   station_3.hourly3_weather_data = response_3.data;
    //   stations_3hourly_resolved_holder.push(station_3);
    // }));
    // await Promise.all(station_daily_url_array.map(async (station_url_5) => {
    //   const { onecall_daily_url_2: onecall_daily_url_2_1, name: name_3, type: type_3 } = station_url_5;
    //   const response_4 = await axios.get(onecall_daily_url_2_1);
    //   const station_4 = {};
    //   station_4.name = name_3;
    //   station_4.type = type_3;
    //   station_4.daily_weather_data = response_4.data;
    //   stations_daily_resolved_holder.push(station_4);
    // }));
    //console.log(JSON.stringify(stations_resolved_holder), " the station resolved holder");
    io.sockets.emit('client_message_weather_current', { message: JSON.stringify(stations_current_resolved_holder) });
    // io.sockets.emit('client_message_weather_hourly3', { message: JSON.stringify(stations_3hourly_resolved_holder) });
    // io.sockets.emit('client_message_weather_daily', { message: JSON.stringify(stations_daily_resolved_holder) });
  } catch (e_1) {
    return console.error(e_1);
  }
}
getWeather();
setInterval(()=> {
  return getWeather();
}, timeout);


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, "172.16.200.35");
server.on('error', onError);
server.on('listening', onListening);

// Instantiation of the websocket on the server
// Use socket.Io for this implementation
// webSocket(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('listening')
  var addr = server.address();
  console.log(addr.port, 'the port', addr)
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const {exec} = require('child_process');
const { default: axios } = require('axios');
exec('wmic process where "ProcessId=' + process.pid + '" CALL setpriority 256');
